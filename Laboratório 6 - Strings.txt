//1. Faça um programa que leia uma string e a imprima.
#include <stdio.h>
#include <string.h>

void
main()
{
    char
        phrase[100];

    fgets(phrase, 100, stdin);

    printf("%s", phrase);
}
========================================================
// 2. Faça um programa que conte o número de 1’s que aparecem em uma string. Exemplo:
// “0011001” -> 3

#include <stdio.h>

void
main()
{
    //Variables
    char 
        text[100];  //string
    int 
        num = 0;    //number to count the ones

    //get the string to analyse
    printf("Enter the text to count how many ones there are: ");
    fgets(text, 100, stdin);
    //a loop to analyse each character searching for 1
    for (int count = 0; count < strlen(text); count++)
    {
        if(text[count] == '1')
            num++;
    }
    //results
    printf("In string %s there is %d ones", text, num); 
}
====================================================
// 3. Faça um programa que receba uma palavra e a imprima de trás-para-frente
#include <stdio.h>
#include <string.h>

void
main()
{
    //Variables
    char 
        word[100];
    
    //get the word to flip
    printf("Enter the word to flip: ");
    fgets(word, 100, stdin);

    //A loop to start printing from the last character to the first
    for (int count = strlen(word); count > -1; count--)
        printf("%c", word[count]);
}
====================================================
// 4. Faça um programa que receba uma palavra e calcule quantas vogais (a, e, i, o, u) possui essa
// palavra. Entre com um caractere (vogal ou consoante) e substitua todas as vogais da palavra
// dada por esse caractere.
#include <stdio.h>
#include <string.h>

void
main()
{
    char 
        word[100],
        element;
    
    int
        num = 0;
    
    //Get the word to analyse
    printf("Enter a word to count how many vowels there are: ");
    fgets(word, 100, stdin);

    //Get the character to do the change
    printf("Enter the character that will change all the vowels: ");
    scanf("%c", &element);

    //Do a for to analyse all the characters and search for vowels, upper or down
    for (int count = 0; count < strlen(word); count++)
    {
        if(word[count] == 'A' || word[count] == 'E' || word[count] == 'I' || word[count] == 'O' || word[count] == 'U' || word[count] == 'a' || word[count] == 'e' || word[count] == 'i' || word[count] == 'o' || word[count] == 'u')
        {
            word[count] = element;
            num++;
        }
    }

    //Conclude
    printf("There are %d vowels and the resultant string is: %s", num, word);
}
======================================================
// 5. Escreva um programa para converter uma cadeia de caracteres de letras maiúsculas em letras
// minúsculas. Dica: some 32 dos caracteres cujo código ASCII está entre 65 e 90.
#include <stdio.h>
#include <string.h>
void
main()
{
    char
        text[100]; //string variable

    //Get the string 
    printf("Enter the phrase to convert all the upper letters: ");
    fgets(text, 100, stdin);

    //A loop to analyse each character and change the upper letters
    for (int count = 0; count < strlen(text); count++)
    {
        if (text[count] >= 65 && text[count] <= 90)
        {
            text[count] = text[count] + 32;
        }
    }

    //conclusion
    printf("%s", text);
}
=========================================================
// 6. Leia uma cadeia de caracteres e converta todos os caracteres para maiúscula. Dica: subtraia
// 32 dos caracteres cujo código ASCII está entre 97 e 122.
#include <stdio.h>
#include <string.h>
void
main()
{
    char
        text[100]; //string variable

    //Get the string 
    printf("Enter the phrase to convert all the upper letters: ");
    fgets(text, 100, stdin);

    //A loop to analyse each character and change the upper letters
    for (int count = 0; count < strlen(text); count++)
    {
        if (text[count] >= 97 && text[count] <= 122)
        {
            text[count] = text[count] - 32;
        }
    }
    //conclusion
    printf("%s", text);
}
===========================================================
// 7. Leia um vetor contendo letras de uma frase inclusive os espaços em branco. Retirar os
// espaços em branco do vetor e depois escrever o vetor resultante.
#include <stdio.h>
#include <string.h>

void
main()
{
    char 
        text[100];

    int
        position = 0;

    //Get the string from the user
    printf("Enter the text with spaces to get then out: ");
    fgets(text, 100, stdin);

    //A loop to roll every character in the string 
    for (int count = 0; count < strlen(text); count++)
    {
        //Looking for a space
        if (text[count] == ' ')
        {
            //Is like copying all the string after the space and writing everything from the space character
            for (int parameter = 0; parameter < (strlen(text) - count); parameter++)
            {
                text[count + parameter] = text[(count + parameter) + 1];
            }
        }
    }

    printf("%s", text);
}
=============================================================================
// 8. Faça um programa em que troque todas as ocorrências de uma letra L1 pela letra L2 em
// uma string. A string e as letras L1 e L2 devem ser fornecidas pelo usuário.
#include <stdio.h>
#include <string.h>

void
main()
{
    char
        text[100], 
        letter1,
        letter2;

    //Getting the text to do the changes
    printf("Enter a text to analyse and make the changes: ");
    fgets(text, 100, stdin);

    //Getting the letter the user want out 
    printf("Enter the letter you want to get out: ");
    scanf("%c", &letter1);

    //Getting the letter the user want in the place
    printf("Enter the letter you want in the place of the other one: ");
    scanf(" %c", &letter2);

    //Loop to run each character in the string and do the necessary changes
    for (int count = 0; count < strlen(text); count++)
    {
        if (text[count] == letter1)
            text[count] = letter2;
    }
    //Printing the result
    printf("\n%s", text);
}
======================================================
//9. Faça um programa que preencha uma cars de string com os modelos de cinco carros
// (exemplos de modelos: Fusca, Gol, Vectra, etc.). Em seguida, preencha um vetor com o consumo
// desses carros, isto é, quantos quilômetros cada um deles faz com um litro de combustível.
// Calcule e mostre:
// (a) O modelo de carro mais econômico;
// (b) Quantos litros de combustível cada um dos carros cadastrados consome para
// percorrer uma distância de 1.000 quilômetros.

#include <stdio.h>

void
main()
{
    int 
        gas[5],   //the gas array
        economic = 0,   //The most economic car
        parameter = 0;  //A parameter

    char
        cars[5][20];    //a matriz to order the cars

    //A loop to get all cars and their gas consume
    for (int count = 0; count < 5; count++)
    {
        //Clean the space to digit to avoid errors
        fflush(stdin);
        
        //getting the cars names and saving in a matriz
        printf("Enter the name of the cars: ");
        fgets(cars[count], 20, stdin);

        //Getting the cars consumes and saving in array
        printf("Enter the cars gas consume: ");
        scanf("%d", &gas[count]);
    }

   
    //A for loop to get the most economic car
    for (int count  = 0; count < 5; count++)
    {
        if (gas[count] > economic)
        {
            //Most economic
            economic = gas[count];

            //A parameter to save the position of the most economic
            parameter = count;
        }
    }

    //Printing the most economic
    printf("The most efficient car is %s with %d km/l\n", cars[parameter], economic);

    //Beautiful
    printf("\n");

    //A for loop to see how many liters to travel
    for (int count = 0; count < 5; count++)
        printf("The %s consume %dL to travel 1000 quilometers\n", cars[count], (1000 / gas[count]));
}
=====================================================================
// 10. Ler o nome e o valor de uma determinada mercadoria de uma loja. Sabendo que o desconto
// para pagamento à vista é de 10% sobre o valor total, calcular o valor a ser pago à vista. Escrever
// o nome da mercadoria, o valor total, o valor do desconto e o valor a ser pago à vista.
#include <stdio.h>
#include <string.h>

void
main()
{
    char
        product[20];
    
    float
        price = 0,
        discount = 0;
    
    printf("Enter the name of the product: ");
    fgets(product, 20, stdin);

    printf("Enter the price of the product: ");
    scanf("%f", &price);

    printf("The price of %s is R$%.1f but with 10%% of discount in cash value is: R$%.2f", product, price, price * 0.9);
}
================================================================
// 11. Escreva um programa que recebe uma string S e inteiros não-negativos I e J e imprima o
// segmento S[I..J].

#include <stdio.h>

void
main()
{
    char 
        text[100]; //A string to treat
    
    int 
        start = 0,  //where will start
        finish = 0; //Where will finished

    //Getting the components
    printf("Enter a string to analyse: ");
    fgets(text, 100, stdin);

    printf("Enter the position that will start writing the segment: ");
    scanf("%d", &start);

    printf("Enter the final position: ");
    scanf("%d", &finish);

    //A loop to print the segment from 'start' to 'finished'
    while (start <= finish)
    {
        printf("%c", text[start]);
        start++;
    }
}
==================================================
// 12. O código de César é uma das mais simples e conhecidas técnicas de criptografia. É um tipo
// de substituição na qual cada letra do texto substituída por outra, que se apresenta no alfabeto
// abaixo dela um número fixo de vezes. Por exemplo, com uma troca de três posições, ‘A’ seria
// substituído por ‘D’, ‘B’ se tornaria ‘E’, e assim por diante. Implemente um programa que faça
// uso desse Código de César (3 posições), entre com uma string e retorne a string codificada. 
#include <stdio.h>
#include <string.h>

void
main()
{
    char 
        text[100] = {}; //the text in analysis

    //Getting the text
    printf("Enter a text: ");
    fgets(text, 100, stdin);

    //A loop to analyse each character
    for (int count = 0; count < 100; count++)
    {
        //if the 3 last words is in the text
        if (text[count] == 'x' || text[count] == 'y' || text[count] == 'z')
            printf("%c", text[count] - 24); 

        //Get out of the space case
        else if (text[count] != 32)
            printf("%c", text[count] + 3);
        
        //If there is a space character
        else if(text[count] == 32)
            printf(" ");
    }
}
==================================================
// 13. Faça um programa que, dada uma string, diga se ela é um palíndromo ou não. Lembrando
// que um palíndromo é uma palavra que tenha a propriedade de poder ser lida tanto da direita
// para a esquerda como da esquerda para a direita.
// Exemplo:
// ovo
// arara
// Socorram-me, subi no ônibus em Marrocos
// Anotaram a data da maratona

#include <stdio.h>
#include <string.h>
#include <ctype.h>

void
main()
{
    char 
        text[100];

    int
        len = 0,
        key = 0,
        count = 0;


    printf("Enter the string: ");
    fgets(text, 100, stdin);


    len = strlen(text);
    len = len - 2;

    while (len > count)
    {
        if (text[count] != text[len])
        {
            key++;
            printf("count = %c, len = %c\n", text[count], text[len]);
        }
        len--;
        count++;
    }


    printf("%d\n", key);
    if (key != 0)
        printf("Its not a palindrome");
    
    else if (key == 0)
        printf("Its a palindrome");
        
}
===================================================
// 14. Implemente um programa que leia duas strings, str1 e str2, e um valor inteiro positivo N.
// Concatene não mais que N caracteres da string str2 à string str1 e termine str1 com ‘\0’.
#include <stdio.h>
#include <string.h>

void
main()
{
    char 
        text1[100],
        text2[100];
    
    int
        num = 0;

    printf("Enter the first string: ");
    scanf("%100[^\n]", text1);
    fflush(stdin);
    printf("Enter the second string: ");
    scanf("%100[^\n]", text2);

    do
    {
        printf("Enter the number of characters that you want to concatenate: ");
        scanf("%d", &num);  

    } while (strlen(text2) < num);


    text2[num + 1] = '\0';

    printf("%s", strcat(text1, text2));
}
====================================================
// 15. Faça um programa que contenha um menu com as seguintes opções:
// (a) Ler uma string S1 (tamanho máximo 20 caracteres);
// (b) Imprimir o tamanho da string S1;
// (c) Comparar a string S1 com uma nova string S2 fornecida pelo usuário e imprimir o
// resultado da comparação;
// (d) Concatenar a string S1 com uma nova string S2 e imprimir na tela o resultado da
// concatenação;
// (e) Imprimir a string S1 de forma reversa;
// (f) Contar quantas vezes um dado caractere aparece na string S1. Esse caractere desse
// ser informado pelo usuário;
// (g) Substituir a primeira ocorrência do caractere C1 da string S1 pelo caractere C2. Os
// caracteres C1 e C2 serão lidos pelo usuário;
// (h) Verificar se uma string S2 é substring de S1. A string S2 deve ser informada pelo
// usuário;
// (i) Retornar uma substring da string S1. Para isso o usuário deve informar a partir de qual
// posição deve ser criada a substring e qual é o tamanho da substring.
#include <stdio.h>
#include <string.h>


void
clean_keyboard()
{
    fflush(stdin);
}

int
main()
{
    char 
        text1[20],
        text2[20],
        ask,
        letter,
        new_char,
        loop,
        bigger_loop;

    int 
        count = 0,
        result = 0,
        start = 0,
        size = 0;

    
    
    do
    {

        printf("\nPlease, choose one option: \n\n");
        printf("(a) Ler uma string S1 (tamanho máximo 20 caracteres)\n\n");
        printf("(b) Imprimir o tamanho da string S1\n\n");
        printf("(c) Comparar a string S1 com uma nova string S2 fornecida pelo usuário e imprimir o resultado da comparação\n\n");
        printf("(d) Concatenar a string S1 com uma nova string S2 e imprimir na tela o resultado da concatenação\n\n");
        printf("(e) Imprimir a string S1 de forma reversa\n\n");
        printf("(f) Contar quantas vezes um dado caractere aparece na string S1. Esse caractere desse ser informado pelo usuário\n\n");
        printf("(g) Substituir a primeira ocorrência do caractere C1 da string S1 pelo caractere C2. Os caracteres C1 e C2 serão lidos pelo usuário\n\n");
        printf("(h) Verificar se uma string S2 é substring de S1. A string S2 deve ser informada pelo usuário\n\n");
        printf("(i) Retornar uma substring da string S1. Para isso o usuário deve informar a partir de qual posição deve ser criada a substring e qual é o tamanho da substring.\n\n");
        
        scanf("%c", &ask);

        if (ask > 90)
            ask = ask - 32;

    } while (ask < 65 && ask > 90);
    
    clean_keyboard();
    printf("Enter your string: ");
    scanf("%20[^\n]", text1);


    clean_keyboard();
    switch (ask)
    {
        case 'A':
            
            printf("Enter your string: ");
            scanf("%20[^\n]", text1);
            break;

        case 'B':
            printf("The length of the string is: %d\n", strlen(text1));
            break;

        case 'C':
            printf("Enter a new string to compare each one: ");
            scanf("%20[^\n]", text1);

            printf("The result of comparing both strings is %d", strcmp(text1, text2));
            break;

        case 'D':
            printf("Enter a new string to concatenate with the first: ");
            scanf("%20[^\n]", text2);

            printf("%s", strcat(text1, text2));
            break;

        case 'E':
            printf("The string reversed is: ");
            for (count = strlen(text1); count > -1; count--)
                printf("%c", text1[count]);
            break;

        case 'F':

            printf("Enter the character you want to count in the string: ");
            scanf("%c", &letter);

            for (count = 0; count < 20; count++)
            {
                if (text1[count] == letter)
                    result++;
            }
            printf("The %c appers in the string %d times", letter, result);
            break;

        case 'G':
            
            printf("Enter the character that you want to change: ");
            scanf("%c", &letter);
            clean_keyboard();
            printf("Enter the character that you want to put in that place: ");
            scanf("%c", &new_char);

            for (count = 0; count < 20; count++)
            {
                if (text1[count] == letter)
                {
                    text1[count] = new_char;
                }
                    
            }
            printf("%s", text1);
            break;

        case 'H':
            printf("Enter a new string to see if is substring: ");
            scanf("%20[^\n]", text2);
            
            result = strstr(text1, text2);
            if (result)
                printf("The substring was found");
            else
                printf("The second string isn't a substring of the first string");
            break;

        case 'I':
            printf("Enter the inicial position of the substring: ");
            scanf("%d", &start);
            clean_keyboard();
            printf("Enter the size of the string");
            scanf("%d", &size);

        
        for (count = start; count < (start + size); count++)
        {
            clean_keyboard();
            printf("%c", text1[count]);
        }
        break;
    }

    return 0;
}
======================================================

